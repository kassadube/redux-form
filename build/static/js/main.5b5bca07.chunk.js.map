{"version":3,"sources":["logo.svg","AppR.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ACTIONS","ALLOWED_NAMES","rootEpic","combineEpics","action$","pipe","ofType","mergeMap","action","_ref","meta","resolve","reject","Observable","of","delay","map","res","indexOf","payload","username","Error","type","catch","error","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","form","reduxFormReducer","applyMiddleware","run","AppR","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","location","hostname","match","ReactDOM","render","src_AppR","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oUCkBlCC,SACgB,oBADhBA,EAEmB,sBAGnBC,EAAgB,CAClB,OACA,OACA,SACA,SAGIC,EAAWC,YAOf,SAAAC,GAAO,OACLA,EAAQC,KACJC,YAAON,GACTO,YAAS,SAAAC,GAAU,IAAAC,EACSD,EAAOE,MAAQ,GAAnCC,EADWF,EACXE,QAASC,EADEH,EACFG,OACf,OAAOC,IAAWC,GAAG,GAClBC,MAAM,KACNC,IAAI,SAAAC,GACH,IAAwD,IAApDhB,EAAciB,QAAQV,EAAOW,QAAQC,UAEvC,MAAM,IAAIC,MAAM,gBAGlB,OADIV,GAASA,EAAQM,GACd,CAAEK,KAAMtB,KAEhBuB,MAAM,SAAAC,GAEL,OADIZ,GAAQA,EAAOY,GACZX,IAAWC,GAAG,CAAEQ,KAAMtB,EAA6BwB,iBAMlEC,EAAiBC,cACjBC,EAAmBC,OAAOC,sCAAwCC,IAC1DC,YACZC,YAAgB,CACdC,KAAMC,MAERP,EACEQ,YACEV,KAINA,EAAeW,IAAIlC,OAyBJmC,mLArBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,0BADZ,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBATSC,aC9DCC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAUC,SAASC,eAAe,SDuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b5bca07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport 'rxjs';\r\nimport React, { Component }from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux';\r\nimport { combineEpics } from 'redux-observable';\r\nimport { createEpicMiddleware, ofType  } from 'redux-observable';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Observable } from 'rxjs';\r\nimport { Provider } from 'react-redux';\r\nimport { reducer as reduxFormReducer } from 'redux-form';\r\nimport { SubmissionError } from 'redux-form';\r\nimport { Values } from 'redux-form-website-template';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nconst ACTIONS = {\r\n    START_SUBMISSION: 'START_SUBMISSION',\r\n    COMPLETE_SUBMISSION: 'COMPLETE_SUBMISSION',\r\n  };\r\n  \r\nconst ALLOWED_NAMES = [\r\n    'john',\r\n    'paul',\r\n    'george',\r\n    'ringo'\r\n  ];\r\n\r\n  const rootEpic = combineEpics(\r\n    // Let's make a single login epic that verifies that the username is valid.\r\n    // The key takeaway here is that this epic is **aware** that some dispatched\r\n    // actions have resolve/reject attached to their FSA meta field. The meta field\r\n    // _is_ a valid FSA field, although resolve/reject are not guaranteed properties.\r\n    // You (and your team) will need to design form associated epics with awareness\r\n    // of these meta fields.\r\n    action$ =>\r\n      action$.pipe( \r\n          ofType(ACTIONS.START_SUBMISSION),\r\n        mergeMap(action => {\r\n          let { resolve, reject } = action.meta || {}; // :eyes:\r\n          return Observable.of(1)\r\n            .delay(1000) // fake network request\r\n            .map(res => {\r\n              if (ALLOWED_NAMES.indexOf(action.payload.username) === -1) {\r\n                // pretend that the server did this verification\r\n                throw new Error('bad username');\r\n              }\r\n              if (resolve) resolve(res); // :eyes: -- resume redux-form `onSubmit` function\r\n              return { type: ACTIONS.COMPLETE_SUBMISSION };\r\n            })\r\n            .catch(error => {\r\n              if (reject) reject(error); // :eyes:\r\n              return Observable.of({ type: ACTIONS.COMPLETE_SUBMISSION, error });\r\n            });\r\n        }))\r\n  );\r\n\r\n  // standard redux stuff\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  combineReducers({\r\n    form: reduxFormReducer,\r\n  }),\r\n  composeEnhancers(\r\n    applyMiddleware(\r\n      epicMiddleware\r\n    )\r\n  )\r\n);\r\nepicMiddleware.run(rootEpic);\r\n\r\nclass AppR extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit dfdf <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppR;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppR from './AppR';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppR />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}